name: Dev Environment Deploy
on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

env:
  TF_VAR_environment: dev
  WORKING_DIR: environments/dev

jobs:
  validate:
    name: Validate and Plan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Upgrade pip and install security tools
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        
        # Install tfsec
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        
        # Install checkov with explicit dependency management
        pip install --no-cache-dir checkov==3.2.255
        
        # Install gitleaks
        wget -q https://github.com/zricethezav/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
        tar -xzf gitleaks_8.18.4_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/
        chmod +x /usr/local/bin/gitleaks

    - name: Verify tool installations
      run: |
        echo "Verifying installed tools..."
        tfsec --version || echo "tfsec installation failed"
        checkov --version || echo "checkov installation failed"
        gitleaks version || echo "gitleaks installation failed"

    - name: Run secret scan
      run: |
        echo "Running gitleaks secret detection..."
        gitleaks detect --source . --verbose --exit-code 0 || true

    - name: Terraform Format Check
      run: |
        echo "Checking Terraform formatting..."
        terraform fmt -check -recursive || true
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        terraform init
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Validate
      run: |
        echo "Validating Terraform configuration..."
        terraform validate
      working-directory: ${{ env.WORKING_DIR }}

    - name: Run tfsec security scan
      run: |
        echo "Running tfsec security scan..."
        tfsec ${{ env.WORKING_DIR }} --format json --out tfsec-results.json --soft-fail || true

    - name: Run Checkov security scan
      run: |
        echo "Running Checkov security scan..."
        checkov -d ${{ env.WORKING_DIR }} --framework terraform --output json --output-file checkov-results.json --soft-fail || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results-dev
        path: |
          tfsec-results.json
          checkov-results.json
        retention-days: 30

    - name: Terraform Plan
      run: |
        echo "Creating Terraform execution plan..."
        terraform plan -out=tfplan -detailed-exitcode
      working-directory: ${{ env.WORKING_DIR }}

    - name: Upload plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-dev
        path: ${{ env.WORKING_DIR }}/tfplan
        retention-days: 30

  deploy:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Download plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-dev
        path: ${{ env.WORKING_DIR }}

    - name: Terraform Init
      run: |
        echo "Initializing Terraform for deployment..."
        terraform init
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Apply
      run: |
        echo "Applying Terraform changes..."
        terraform apply -auto-approve tfplan
      working-directory: ${{ env.WORKING_DIR }}

    - name: Generate deployment report
      run: |
        echo "Generating deployment report..."
        echo "# 🚀 Dev Deployment Report" > deployment-report.md
        echo "## 📅 Timestamp: $(date)" >> deployment-report.md
        echo "## 🔗 Commit: ${{ github.sha }}" >> deployment-report.md
        echo "## 👤 Triggered by: ${{ github.actor }}" >> deployment-report.md
        echo "## 🎯 Environment: Development" >> deployment-report.md
        echo "## 📊 Resources:" >> deployment-report.md
        
        # Generate state information
        if terraform show -json > terraform-state.json 2>/dev/null; then
          echo "- ✅ State file generated successfully" >> deployment-report.md
        else
          echo "- ⚠️ State file generation failed" >> deployment-report.md
        fi
        
        echo "- 🔍 Security scans completed" >> deployment-report.md
        echo "- 🎉 Development deployment successful" >> deployment-report.md
        
        echo "## 📋 Summary:" >> deployment-report.md
        echo "Deployment completed at $(date) for commit ${{ github.sha }}" >> deployment-report.md
      working-directory: ${{ env.WORKING_DIR }}

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts-dev
        path: |
          ${{ env.WORKING_DIR }}/deployment-report.md
          ${{ env.WORKING_DIR }}/terraform-state.json
        retention-days: 90

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    steps:
    - name: Clean up temporary artifacts
      run: |
        echo "Workflow completed. Temporary artifacts will be cleaned up automatically based on retention policies."
