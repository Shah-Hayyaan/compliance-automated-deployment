name: Dev Environment Deploy

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

env:
  TF_VAR_environment: dev
  WORKING_DIR: environments/dev

jobs:
  validate:
    name: Validate and Plan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        pip install checkov || true
        wget -q https://github.com/zricethezav/gitleaks/releases/latest/download/gitleaks_8.18.0_linux_x64.tar.gz
        tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/

    - name: Run secret scan
      run: gitleaks detect --source . --verbose || true

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.WORKING_DIR }}

    - name: Run tfsec
      run: tfsec ${{ env.WORKING_DIR }} --format json --out tfsec-results.json || true

    - name: Run Checkov
      run: checkov -d ${{ env.WORKING_DIR }} --framework terraform --output json --output-file checkov-results.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results-dev
        path: |
          tfsec-results.json
          checkov-results.json

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ${{ env.WORKING_DIR }}

    - name: Upload plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-dev
        path: ${{ env.WORKING_DIR }}/tfplan

  deploy:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Download plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-dev
        path: ${{ env.WORKING_DIR }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ${{ env.WORKING_DIR }}

    - name: Generate deployment report
      run: |
        echo "# 🚀 Dev Deployment Report" > deployment-report.md
        echo "## 📅 Timestamp: $(date)" >> deployment-report.md
        echo "## 🔗 Commit: ${{ github.sha }}" >> deployment-report.md
        echo "## 👤 Triggered by: ${{ github.actor }}" >> deployment-report.md
        echo "## 🎯 Environment: Development" >> deployment-report.md
        echo "## 📊 Resources:" >> deployment-report.md
        terraform show -json > terraform-state.json
        echo "- ✅ State file generated successfully" >> deployment-report.md
        echo "- 🔍 Security scans completed" >> deployment-report.md
        echo "- 🎉 Development deployment successful" >> deployment-report.md

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts-dev
        path: |
          deployment-report.md
          ${{ env.WORKING_DIR }}/terraform-state.json
