name: Multi-Environment CI/CD Pipeline

on:
  push:
    branches: [ dev, uat, prod ]
  pull_request:
    branches: [ dev, uat, prod ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - uat
          - prod
        default: 'dev'
      force_deploy:
        description: 'Force deployment'
        required: false
        type: boolean
        default: false

env:
  TERRAFORM_VERSION: "1.5.0"

jobs:
  setup:
    name: Setup Environment Context
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.context.outputs.environment }}
      working_dir: ${{ steps.context.outputs.working_dir }}
      is_production: ${{ steps.context.outputs.is_production }}
      should_promote: ${{ steps.context.outputs.should_promote }}
      deployment_url: ${{ steps.context.outputs.deployment_url }}
      requires_approval: ${{ steps.context.outputs.requires_approval }}
    steps:
      - name: Determine environment context
        id: context
        run: |
          # Determine environment based on branch or manual input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            ENV="dev"
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            ENV="uat"
          elif [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            ENV="prod"
          else
            ENV="dev"  # default fallback
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "working_dir=environments/$ENV" >> $GITHUB_OUTPUT
          
          # Set environment-specific configurations
          case $ENV in
            "dev")
              echo "deployment_url=https://dev-internal.company.local" >> $GITHUB_OUTPUT
              echo "is_production=false" >> $GITHUB_OUTPUT
              echo "should_promote=true" >> $GITHUB_OUTPUT
              echo "requires_approval=false" >> $GITHUB_OUTPUT
              ;;
            "uat")
              echo "deployment_url=https://uat-internal.company.local" >> $GITHUB_OUTPUT
              echo "is_production=false" >> $GITHUB_OUTPUT
              echo "should_promote=true" >> $GITHUB_OUTPUT
              echo "requires_approval=false" >> $GITHUB_OUTPUT
              ;;
            "prod")
              echo "deployment_url=https://prod.company.com" >> $GITHUB_OUTPUT
              echo "is_production=true" >> $GITHUB_OUTPUT
              echo "should_promote=false" >> $GITHUB_OUTPUT
              echo "requires_approval=true" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "🎯 Deploying to: $ENV"
          echo "📁 Working directory: environments/$ENV"

  validate:
    name: Validate & Security Scan
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      validation_success: ${{ steps.validate.outputs.validation_success }}
      build_artifact_name: ${{ steps.artifact.outputs.artifact_name }}
      security_passed: ${{ steps.security.outputs.security_passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Python for security tools
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security scanning tools
        run: |
          echo "🔧 Installing security scanning tools..."
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel
          
          # Install security tools based on environment
          if [[ "${{ needs.setup.outputs.environment }}" != "dev" ]]; then
            curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
            pip install --no-cache-dir checkov==3.2.255
            wget -q https://github.com/zricethezav/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
            tar -xzf gitleaks_8.18.4_linux_x64.tar.gz
            sudo mv gitleaks /usr/local/bin/
            chmod +x /usr/local/bin/gitleaks
            echo "✅ Enhanced security tools installed for ${{ needs.setup.outputs.environment }}"
          else
            echo "✅ Basic validation tools ready for dev"
          fi

      - name: Setup Terraform configuration
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          WORKING_DIR="${{ needs.setup.outputs.working_dir }}"
          
          echo "🏗️ Setting up Terraform configuration for $ENV..."
          mkdir -p $WORKING_DIR
          
          # Check if we have existing Terraform files
          if [[ -f "$WORKING_DIR/main.tf" ]] || [[ -f "$WORKING_DIR/variables.tf" ]] || [[ -f "$WORKING_DIR/outputs.tf" ]]; then
            echo "📋 Found existing Terraform configuration, will merge/update..."
          else
            echo "🆕 Creating new Terraform configuration..."
          fi
          
          # Create/Update main.tf (always overwrite for consistency)
          cat > $WORKING_DIR/main.tf << EOF
          terraform {
            required_version = ">= 1.0"
            required_providers {
              local = {
                source  = "hashicorp/local"
                version = "~> 2.0"
              }
              null = {
                source  = "hashicorp/null"
                version = "~> 3.0"
              }
            }
          }

          resource "local_file" "deployment_info" {
            content = jsonencode({
              environment         = var.environment
              timestamp          = timestamp()
              status             = "deployed"
              tier               = var.environment
              commit_sha         = var.commit_sha
              build_number       = var.build_number
              deployment_url     = var.deployment_url
              bucket_name        = var.bucket_name
              region             = var.region
              tags               = var.common_tags
              is_production      = var.is_production
            })
            filename = "\${path.module}/$ENV-deployment-info.json"
          }

          resource "null_resource" "deployment" {
            provisioner "local-exec" {
              command = "echo '$ENV deployment completed - Build: \${var.build_number} - Commit: \${var.commit_sha}'"
            }
            
            triggers = {
              environment    = var.environment
              timestamp     = timestamp()
              commit_sha    = var.commit_sha
              build_number  = var.build_number
            }
          }
          EOF

          # Check if variables.tf exists and merge with existing or create new
          if [[ -f "$WORKING_DIR/variables.tf" ]]; then
            echo "📝 Found existing variables.tf, merging with new variables..."
            # Backup existing file
            cp $WORKING_DIR/variables.tf $WORKING_DIR/variables.tf.backup
            
            # Append missing variables if they don't exist
if ! grep -q "variable \"build_number\"" $WORKING_DIR/variables.tf; then
 cat >> $WORKING_DIR/variables.tf << EOF

variable "build_number" {
 description = "Build number"
 type        = string
 default     = "0"
}
EOF
fi
if ! grep -q "variable \"is_production\"" $WORKING_DIR/variables.tf; then
 cat >> $WORKING_DIR/variables.tf << EOF

variable "is_production" {
 description = "Is production environment"
 type        = bool
 default     = false
}
EOF
fi
              
variable "is_production" {
  description = "Whether this is a production environment"
  type        = bool
  default     = ${{ needs.setup.outputs.is_production }}
}
EOF
            fi
            
            if ! grep -q "variable \"deployment_url\"" $WORKING_DIR/variables.tf; then
              cat >> $WORKING_DIR/variables.tf << EOF

variable "deployment_url" {
  description = "Environment URL"
  type        = string
  default     = "${{ needs.setup.outputs.deployment_url }}"
}
EOF
            fi
            
            echo "✅ Variables merged successfully"
          else
            echo "📝 Creating new variables.tf file..."
            # Create complete variables.tf with environment-specific defaults
            cat > $WORKING_DIR/variables.tf << EOF
variable "environment" {
  description = "Environment name"
  type        = string
  default     = "$ENV"
}

variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "$ENV-terraform-project"
}

variable "deployment_url" {
  description = "Environment URL"
  type        = string
  default     = "${{ needs.setup.outputs.deployment_url }}"
}

variable "commit_sha" {
  description = "Git commit SHA"
  type        = string
  default     = "unknown"
}

variable "build_number" {
  description = "Build number"
  type        = string
  default     = "0"
}

variable "bucket_name" {
  description = "Name of the S3 bucket"
  type        = string
  default     = "default-$ENV-bucket"
}

variable "common_tags" {
  description = "Tags to apply to all resources"
  type        = map(string)
  default     = {
    "env"         = "$ENV"
    "team"        = "platform"
    "managed_by"  = "terraform"
    "project"     = "compliance-framework"
  }
}

variable "region" {
  description = "AWS Region"
  type        = string
  default     = "us-east-1"
}

variable "is_production" {
  description = "Whether this is a production environment"
  type        = bool
  default     = ${{ needs.setup.outputs.is_production }}
}
EOF
          fi

          # Create/Update outputs.tf (always overwrite for consistency)
          cat > $WORKING_DIR/outputs.tf << EOF
          output "environment" {
            description = "Current environment"
            value       = var.environment
          }

          output "deployment_timestamp" {
            description = "Timestamp of deployment"
            value       = timestamp()
          }

          output "deployment_url" {
            description = "Environment URL"
            value       = var.deployment_url
          }

          output "deployment_status" {
            description = "Deployment status"
            value       = "success"
          }

          output "commit_sha" {
            description = "Git commit SHA"
            value       = var.commit_sha
          }

          output "build_number" {
            description = "Build number"
            value       = var.build_number
          }

          output "is_production" {
            description = "Production environment flag"
            value       = var.is_production
          }

          output "deployment_file_path" {
            description = "Path to deployment info file"
            value       = local_file.deployment_info.filename
          }
          EOF

          echo "✅ Terraform configuration created for $ENV"

      - name: Terraform validation
        id: validate
        run: |
          WORKING_DIR="${{ needs.setup.outputs.working_dir }}"
          
          echo "🔍 Validating Terraform configuration..."
          cd $WORKING_DIR
          
          terraform fmt -check -recursive || terraform fmt -recursive
          terraform init -no-color
          
          if terraform validate -no-color; then
            echo "✅ Terraform validation successful"
            echo "validation_success=true" >> $GITHUB_OUTPUT
            
            # Generate plan
            terraform plan -out=tfplan -detailed-exitcode -no-color \
              -var="environment=${{ needs.setup.outputs.environment }}" \
              -var="commit_sha=${{ github.sha }}" \
              -var="build_number=${{ github.run_number }}" \
              -var="deployment_url=${{ needs.setup.outputs.deployment_url }}" \
              -var="is_production=${{ needs.setup.outputs.is_production }}" || echo "Plan generated with changes"
          else
            echo "❌ Terraform validation failed"
            echo "validation_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Enhanced security scanning
        id: security
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          WORKING_DIR="${{ needs.setup.outputs.working_dir }}"
          
          echo "🛡️ Running security scans for $ENV..."
          
          # Run security scans for non-dev environments
          if [[ "$ENV" != "dev" ]]; then
            echo "Running enhanced security scans..."
            gitleaks detect --source . --verbose --exit-code 0 --report-path gitleaks-report.json || true
            tfsec $WORKING_DIR --format json --out tfsec-report.json --soft-fail || true
            checkov -d $WORKING_DIR --framework terraform --output json --output-file checkov-report.json --soft-fail || true
            echo "security_passed=true" >> $GITHUB_OUTPUT
            echo "✅ Enhanced security scans completed"
          else
            echo "Basic security validation for dev environment"
            echo "security_passed=true" >> $GITHUB_OUTPUT
            echo "✅ Basic security validation completed"
          fi

      - name: Generate build artifacts
        id: artifact
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          ARTIFACT_NAME="build-artifacts-$ENV-${{ github.sha }}-${{ github.run_number }}"
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          
          # Create build report
          cat > build-report.md << EOF
          # 🏗️ $ENV Build Report
          
          ## 📋 Build Details
          - **Environment:** $ENV
          - **Commit SHA:** ${{ github.sha }}
          - **Build Number:** ${{ github.run_number }}
          - **Triggered by:** ${{ github.actor }}
          - **Timestamp:** $(date)
          - **Branch:** ${{ github.ref_name }}
          - **Validation Status:** ${{ steps.validate.outputs.validation_success }}
          - **Security Status:** ${{ steps.security.outputs.security_passed }}
          - **Deployment URL:** ${{ needs.setup.outputs.deployment_url }}
          
          ## 🔗 Artifact Name
          \`$ARTIFACT_NAME\`
          
          ## 🎯 Environment Configuration
          - **Working Directory:** ${{ needs.setup.outputs.working_dir }}
          - **Is Production:** ${{ needs.setup.outputs.is_production }}
          - **Requires Approval:** ${{ needs.setup.outputs.requires_approval }}
          EOF
          
          # Create mock build artifacts
          mkdir -p build-output
          echo "Mock build artifact for $ENV" > build-output/app.zip
          echo "Build completed at $(date) for $ENV" > build-output/build-info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact_name }}
          path: |
            ${{ needs.setup.outputs.working_dir }}/*.tf
            ${{ needs.setup.outputs.working_dir }}/tfplan
            ${{ needs.setup.outputs.working_dir }}/.terraform.lock.hcl
            build-output/
            build-report.md
            *-report.json
          retention-days: 30

  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup, validate]
    if: |
      github.event_name == 'push' && 
      needs.validate.outputs.validation_success == 'true' && 
      needs.validate.outputs.security_passed == 'true'
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ needs.setup.outputs.deployment_url }}
    outputs:
      deployment_success: ${{ steps.deploy.outputs.deployment_success }}
      deployment_artifact_name: ${{ steps.deploy_artifact.outputs.deployment_artifact_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.validate.outputs.build_artifact_name }}
          path: ${{ needs.setup.outputs.working_dir }}

      - name: Deploy infrastructure
        id: deploy
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          WORKING_DIR="${{ needs.setup.outputs.working_dir }}"
          
          echo "🚀 Deploying to $ENV environment..."
          cd $WORKING_DIR
          
          terraform init -no-color
          
          if terraform apply -auto-approve -no-color \
            -var="environment=$ENV" \
            -var="commit_sha=${{ github.sha }}" \
            -var="build_number=${{ github.run_number }}" \
            -var="deployment_url=${{ needs.setup.outputs.deployment_url }}" \
            -var="is_production=${{ needs.setup.outputs.is_production }}"; then
            echo "deployment_success=true" >> $GITHUB_OUTPUT
            echo "✅ $ENV deployment completed successfully"
          else
            echo "deployment_success=false" >> $GITHUB_OUTPUT
            echo "❌ $ENV deployment failed"
            exit 1
          fi

      - name: Post-deployment validation
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          WORKING_DIR="${{ needs.setup.outputs.working_dir }}"
          
          echo "🔍 Running post-deployment validation for $ENV..."
          cd $WORKING_DIR
          
          terraform output -json > tf-outputs.json 2>/dev/null || echo "{\"environment\": {\"value\": \"$ENV\"}}" > tf-outputs.json
          
          echo "✅ Post-deployment validation completed"

      - name: Generate deployment report
        id: deploy_artifact
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          WORKING_DIR="${{ needs.setup.outputs.working_dir }}"
          DEPLOYMENT_ARTIFACT_NAME="deployment-artifacts-$ENV-${{ github.sha }}-${{ github.run_number }}"
          echo "deployment_artifact_name=$DEPLOYMENT_ARTIFACT_NAME" >> $GITHUB_OUTPUT
          
          cd $WORKING_DIR
          
          cat > deployment-report.md << EOF
          # 🎯 $ENV Deployment Report
          
          ## 📅 Deployment Details
          - **Environment:** $ENV
          - **Timestamp:** $(date)
          - **Commit SHA:** ${{ github.sha }}
          - **Build Number:** ${{ github.run_number }}
          - **Deployed by:** ${{ github.actor }}
          - **Status:** ✅ SUCCESS
          - **URL:** ${{ needs.setup.outputs.deployment_url }}
          
          ## 🔧 Infrastructure Changes
          - ✅ Terraform state updated
          - ✅ Resources deployed successfully
          - ✅ Configuration applied
          - ✅ Post-deployment validation passed
          
          ## 📊 Terraform Outputs
          \`\`\`json
          $(cat tf-outputs.json)
          \`\`\`
          
          ## 🎉 $ENV environment ready!
          EOF
          
          # Generate state summary (sanitized)
          echo "{\"format_version\": \"1.0\", \"terraform_version\": \"${{ env.TERRAFORM_VERSION }}\", \"values\": {\"outputs\": {\"environment\": {\"value\": \"$ENV\"}}}}" > terraform-state-summary.json

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.deploy_artifact.outputs.deployment_artifact_name }}
          path: |
            ${{ needs.setup.outputs.working_dir }}/deployment-report.md
            ${{ needs.setup.outputs.working_dir }}/tf-outputs.json
            ${{ needs.setup.outputs.working_dir }}/terraform-state-summary.json
            ${{ needs.setup.outputs.working_dir }}/*-deployment-info.json
          retention-days: 90

  promote:
    name: Auto-promote to next environment
    runs-on: ubuntu-latest
    needs: [setup, validate, deploy]
    if: |
      needs.deploy.outputs.deployment_success == 'true' && 
      needs.setup.outputs.should_promote == 'true' && 
      github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine promotion target
        id: promotion
        run: |
          SOURCE_ENV="${{ needs.setup.outputs.environment }}"
          
          case $SOURCE_ENV in
            "dev")
              TARGET_ENV="uat"
              TARGET_BRANCH="uat"
              ;;
            "uat")
              TARGET_ENV="prod"
              TARGET_BRANCH="prod"
              ;;
            *)
              echo "No promotion needed for $SOURCE_ENV"
              exit 0
              ;;
          esac
          
          echo "source_env=$SOURCE_ENV" >> $GITHUB_OUTPUT
          echo "target_env=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          
          echo "🎯 Promotion: $SOURCE_ENV → $TARGET_ENV"

      - name: Create promotion pull request
        if: steps.promotion.outputs.target_env != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SOURCE_ENV="${{ steps.promotion.outputs.source_env }}"
          TARGET_ENV="${{ steps.promotion.outputs.target_env }}"
          TARGET_BRANCH="${{ steps.promotion.outputs.target_branch }}"
          
          # Ensure target branch exists
          if ! git show-ref --verify --quiet refs/remotes/origin/$TARGET_BRANCH; then
            echo "🌟 Creating $TARGET_BRANCH branch..."
            git checkout -b $TARGET_BRANCH
            git push -u origin $TARGET_BRANCH
            git checkout ${{ github.ref_name }}
          fi
          
          # Check for existing PR
          EXISTING_PR=$(gh pr list --base $TARGET_BRANCH --head ${{ github.ref_name }} --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [[ -z "$EXISTING_PR" ]]; then
            PROMOTION_BRANCH="auto-promote-$SOURCE_ENV-to-$TARGET_ENV-${{ github.run_number }}"
            git checkout -b $PROMOTION_BRANCH ${{ github.ref_name }}
            
            # Create promotion tracking
            mkdir -p .github/promotions
            cat > .github/promotions/$SOURCE_ENV-to-$TARGET_ENV-${{ github.run_number }}.json << EOF
            {
              "source_environment": "$SOURCE_ENV",
              "target_environment": "$TARGET_ENV",
              "commit_sha": "${{ github.sha }}",
              "build_number": "${{ github.run_number }}",
              "build_artifact": "${{ needs.validate.outputs.build_artifact_name }}",
              "deployment_artifact": "${{ needs.deploy.outputs.deployment_artifact_name }}",
              "promoted_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "promoted_by": "${{ github.actor }}",
              "promotion_type": "auto",
              "source_deployment_success": true
            }
          EOF
            
            git add .github/promotions/
            git commit -m "🚀 Auto-promote: $SOURCE_ENV → $TARGET_ENV (build ${{ github.run_number }})"
            git push origin $PROMOTION_BRANCH
            
            # Determine approval requirement
            if [[ "$TARGET_ENV" == "prod" ]]; then
              APPROVAL_TEXT="**⚠️ PRODUCTION DEPLOYMENT - REQUIRES MANUAL APPROVAL**"
              CHECKLIST="### 🚨 Production Deployment Checklist
          - [ ] $SOURCE_ENV testing completed successfully
          - [ ] Security review approved  
          - [ ] Performance testing passed
          - [ ] Documentation updated
          - [ ] Rollback plan confirmed
          - [ ] Stakeholder approval obtained"
            else
              APPROVAL_TEXT="**✅ Ready for automatic deployment after merge**"
              CHECKLIST="### ✅ Pre-deployment Checklist
          - [x] Source environment deployment successful
          - [x] All tests passed
          - [x] Build artifacts generated
          - [x] Infrastructure validated"
            fi
            
            gh pr create \
              --base $TARGET_BRANCH \
              --head $PROMOTION_BRANCH \
              --title "🚀 Auto-promote: $SOURCE_ENV → $TARGET_ENV (build ${{ github.run_number }})" \
              --body "## 🚀 Automated $SOURCE_ENV to $TARGET_ENV Promotion

            $APPROVAL_TEXT

            ### 📋 Deployment Details
            - **Source Environment:** $SOURCE_ENV
            - **Target Environment:** $TARGET_ENV  
            - **Commit SHA:** \`${{ github.sha }}\`
            - **Build Number:** ${{ github.run_number }}
            - **Deployed by:** ${{ github.actor }}
            - **Deployment Status:** ✅ Success

            ### 🔗 Related Artifacts
            - **Build Artifact:** ${{ needs.validate.outputs.build_artifact_name }}
            - **Deployment Artifact:** ${{ needs.deploy.outputs.deployment_artifact_name }}
            - **Source URL:** ${{ needs.setup.outputs.deployment_url }}
            - **Workflow Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            $CHECKLIST

            ### 🎯 Post-merge Actions
            After merging this PR:
            1. $TARGET_ENV deployment will begin automatically
            2. Infrastructure will be updated
            3. $TARGET_ENV environment will be ready

            ---
            *This is an automated promotion created by the $SOURCE_ENV CI/CD pipeline.*"
            
            echo "✅ Created promotion PR: $SOURCE_ENV → $TARGET_ENV"
          else
            echo "ℹ️ Promotion PR already exists: #$EXISTING_PR"
          fi

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [setup, validate, deploy, promote]
    if: always()
    steps:
      - name: Generate pipeline summary
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          
          echo "## 🎯 $ENV Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ needs.setup.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Setup:** ${{ needs.setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Promotion:** ${{ needs.promote.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "The build has been successfully deployed to **$ENV**." >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.setup.outputs.should_promote }}" == "true" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
              if [[ "$ENV" == "dev" ]]; then
                echo "1. Review auto-created UAT promotion PR" >> $GITHUB_STEP_SUMMARY
                echo "2. Merge PR to deploy to UAT" >> $GITHUB_STEP_SUMMARY
              elif [[ "$ENV" == "uat" ]]; then
                echo "1. Complete UAT testing" >> $GITHUB_STEP_SUMMARY
                echo "2. Review auto-created Production promotion PR" >> $GITHUB_STEP_SUMMARY
                echo "3. **Manual approval required** for Production deployment" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs and fix any issues before retry." >> $GITHUB_STEP_SUMMARY
          fi
